package com.lo.algorithms.tree;

public class BinaryTree {
    /**
     * 非递归遍历二叉树。<br>
     * 思想：从二叉树根节点绕二叉树走一圈，每个节点都会被经过3次，
     *  第一次被经过的顺序是前序遍历：从当前节点走向左孩子
     *  第二次被经过的顺序是中序遍历：从左孩子走回来
     *  第三次被经过的顺序是后序遍历：从右孩子走回来
     * 思路：
     * 跟节点初始化一个栈；只要栈不为空，一直循环做一下逻辑：
     *  1 只要左孩子不空，左孩子入栈。
     *  2 左孩子为空时，判断栈顶是否有右孩子（判断是否有右孩子前，先确定右孩子是否被弹出，如果上一个被弹出的节点是其右孩子，弹出当前节点）
     *      若有右孩子，右孩子压入栈顶，回到第1步
     *      否则，栈顶弹出
     * 前序遍历：入栈时打印
     * 中序遍历：当左孩子为空，或左孩子被弹出时打印
     * 后续遍历：右孩子为空，或右孩子被弹出时打印（出栈）
     */
}
